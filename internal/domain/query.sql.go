// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package domain

import (
	"context"
	"database/sql"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
  name, slug, author, isActive
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, name, slug, author, isactive, isdeleted
`

type CreateCategoryParams struct {
	Name     string
	Slug     string
	Author   sql.NullInt32
	Isactive sql.NullBool
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory,
		arg.Name,
		arg.Slug,
		arg.Author,
		arg.Isactive,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Author,
		&i.Isactive,
		&i.Isdeleted,
	)
	return i, err
}

const deleteCategories = `-- name: DeleteCategories :exec
DELETE FROM categories
WHERE id = $1
`

func (q *Queries) DeleteCategories(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCategories, id)
	return err
}

const fetchCategories = `-- name: FetchCategories :many
SELECT id, name, slug, author, isactive, isdeleted FROM categories
WHERE isDeleted = false
LIMIT $1 OFFSET $2
`

type FetchCategoriesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) FetchCategories(ctx context.Context, arg FetchCategoriesParams) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, fetchCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Author,
			&i.Isactive,
			&i.Isdeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategory = `-- name: GetCategory :one
SELECT id, name, slug, author, isactive, isdeleted FROM categories
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, id int64) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Author,
		&i.Isactive,
		&i.Isdeleted,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, name, slug, author, isactive, isdeleted FROM categories
ORDER BY name
`

func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Author,
			&i.Isactive,
			&i.Isdeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
